(name 'SandstoneGOODS-RamonLeon.27' message 'Don''t startup the connection pool reaper unless the goods store is actually the configured store in use.' id 'bb66eef0-fff1-4c8b-8c24-61abbaecf794' date '11 May 2011' time '8:43:30 pm' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-RamonLeon.26' message 'Broke tests into seperate package.When using nested commit around everything, don''t actually commit unless a record triggered the dirty bit.  Prevents unnecessary commits in goods that slow down read only web requests wrapped in a commit.  A poor mans write barrier.  Still working on support for actual write barrier.' id '2f82099d-1205-4bbc-8f94-5c38bcf7106b' date '6 May 2011' time '3:00:07 pm' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-RamonLeon.25' message 'Want to run all tests in both single transaction mode and normal mode, introduced a test subclass.' id 'a6c8d281-be51-4961-8870-a643fd72deee' date '28 April 2011' time '12:03:20 pm' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-RamonLeon.24' message 'Removing that optimization completely as the whole point was to avoid copying the dictionary; looking closer, it disn''t really make sense here, must have stayed up to late.  Reverting method back to previous working version.' id 'eb1de2ff-8b89-4089-bf71-e0552bda5078' date '28 April 2011' time '10:27:20 am' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-NicolasPetton.23' message 'Fixed SDGoodsStore>>forClass:findAll: to answer a dictionary' id '08000000-1508-ea0c-1508-ea0c14000000' date '28 April 2011' time '11:13:07 am' author 'NicolasPetton' ancestors ((name 'SandstoneGOODS-RamonLeon.22' message 'Work in progress, everything works except abortChanges.I''ve added back in the nested transaction ability and have it working correctly with some additional improvements.  This feature is aimed at web apps/sites where it''s more efficient to do a single refresh, make changes, and commit for the whole request rather than for each action that touches the store api.Normally calling any query method would run a refresh, calling save would commit for each object you called it on.  Multiple refreshes and multiple commits in a single http request is not ideal.So for Seaside 2.9 as an example, you could wrap the request in a commit like so...MySessionClass>>responseForRequest: aRequest	^ SDActiveRecord commit: [ super responseForRequest: aRequest ]	And commit will immediately do a refresh, process the block and suppress all refreshes and commits within, and then perform a commit after the block is processed.  While in a #commit: Sandstone save simply modifes the model but doesn''t commit it and queries do not cause additional refreshes.  This is similar to what Gemstone does, wraps a single transaction around the entire request.I also optimized a few of the query methods to avoid unnecessary copies when no subclasses are found for a class.  Also killed testDeleteAll override as it was identical to the one on the parent test case.Other than the abortChanges failure, this release seems pretty solid and with #commit: working, much faster and more suitable to web applications.' id '523f754a-650d-423b-8271-ac514ab94db1' date '27 April 2011' time '10:42:20 pm' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-RamonLeon.21' message 'remove startUp: override of SandstoneDb stuff.' id 'd63d85ba-8f99-4f9e-b3ca-a92da71bc3d9' date '27 April 2011' time '7:43:26 am' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-NicolasPetton.20' message 'Fixed SDGoodsStore>>commit: (missing backets before #ensure:)' id '08000000-1508-2604-1508-260414000000' date '26 April 2011' time '11:28:30 am' author 'NicolasPetton' ancestors ((name 'SandstoneGOODS-RamonLeon.19' message 'Extract retry count, no naked magic numbers.' id '4f7cef83-2584-48ed-a8ec-88935dacd871' date '24 April 2011' time '9:54:19 pm' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-RamonLeon.18' message 'Goods built in commitWithRetry: recurses forever on a fatal error; don''t use it.' id 'c46f85a6-38d0-4955-be36-7f07aceabdc5' date '24 April 2011' time '9:53 pm' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-RamonLeon.17' message 'If you kill and restart goods, the connection pool will have bad connections in it that''ll throw exceptions next time they''re accessed.Added a retry ability to #refresh and to #commit: to retry by throwing out the current threads connection and retrying the exception up to 6 times.After 6 bad connections, just pass the exception on up.' id '6561f208-157a-4c13-9bfe-12b3b61cc007' date '24 April 2011' time '5:58:16 pm' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-RamonLeon.16' message 'I reworked the store to pass all unit test including the inheritance ones that it failed before.  Then I introduced thread local storage for the KKDatabase connection and a KKDatabase connection pool so that every thread, aka Seaside request, has exclusive access to a KKDatabase connection.  The connections arepooled in a SharedQueue when not in use by a client awaiting another request for a connected KKDatabase.  I also removed an unnecessary override of SandstoneDb''s SDCheckPoiner>>startUp: method.All tests now pass.' id '01596ea7-9e7a-4242-be2b-ee8bcc33c430' date '24 April 2011' time '11:03:26 am' author 'RamonLeon' ancestors ((name 'SandstoneGOODS-NicolasPetton.15' message 'Fix for SGoodsStore>>updateObject:  Test if the old object to update is a proxy' id 'c7dbdf45-30f6-4f32-87c1-d39dbfab6a95' date '13 April 2011' time '10:00:27 pm' author 'NicolasPetton' ancestors ((name 'SandstoneGOODS-NicolasPetton.14' message '- Fixed SDGoodsStore>>forClass:, #updateObject: and #forClass:findAll:- Added BTree>>at:ifPresent:' id '325920f5-7195-4cad-bceb-c987f3adfa7d' date '13 April 2011' time '9:59:08 pm' author 'NicolasPetton' ancestors ((name 'SandstoneGOODS-nes.10' message 'all code, i hope' id '5667c162-ddfd-48c3-a790-6e83b1d06abf' date '14 May 2009' time '6:27:38 pm' author 'nes' ancestors ((name 'SandstoneGOODS-nes.8' message 'code was lost, bringing it back' id 'c3d6862d-084b-4228-8b63-8fa79d84bb22' date '14 May 2009' time '6:24:58 pm' author 'nes' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())